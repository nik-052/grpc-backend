// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: port.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortServiceClient is the client API for PortService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortServiceClient interface {
	CreatePort(ctx context.Context, in *CreatePortRequest, opts ...grpc.CallOption) (*CreatePortResponse, error)
	RetreivePort(ctx context.Context, in *RetrievePortRequest, opts ...grpc.CallOption) (*RetrievePortResponse, error)
	UpdatePort(ctx context.Context, in *UpdatePortRequest, opts ...grpc.CallOption) (*UpdatePortResponse, error)
	DeletePort(ctx context.Context, in *DeletePortResquest, opts ...grpc.CallOption) (*DeletePortResponse, error)
	ListPort(ctx context.Context, in *ListPortRequest, opts ...grpc.CallOption) (PortService_ListPortClient, error)
}

type portServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortServiceClient(cc grpc.ClientConnInterface) PortServiceClient {
	return &portServiceClient{cc}
}

func (c *portServiceClient) CreatePort(ctx context.Context, in *CreatePortRequest, opts ...grpc.CallOption) (*CreatePortResponse, error) {
	out := new(CreatePortResponse)
	err := c.cc.Invoke(ctx, "/main.PortService/CreatePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) RetreivePort(ctx context.Context, in *RetrievePortRequest, opts ...grpc.CallOption) (*RetrievePortResponse, error) {
	out := new(RetrievePortResponse)
	err := c.cc.Invoke(ctx, "/main.PortService/RetreivePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) UpdatePort(ctx context.Context, in *UpdatePortRequest, opts ...grpc.CallOption) (*UpdatePortResponse, error) {
	out := new(UpdatePortResponse)
	err := c.cc.Invoke(ctx, "/main.PortService/UpdatePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) DeletePort(ctx context.Context, in *DeletePortResquest, opts ...grpc.CallOption) (*DeletePortResponse, error) {
	out := new(DeletePortResponse)
	err := c.cc.Invoke(ctx, "/main.PortService/DeletePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) ListPort(ctx context.Context, in *ListPortRequest, opts ...grpc.CallOption) (PortService_ListPortClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortService_ServiceDesc.Streams[0], "/main.PortService/ListPort", opts...)
	if err != nil {
		return nil, err
	}
	x := &portServiceListPortClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PortService_ListPortClient interface {
	Recv() (*ListPortResponse, error)
	grpc.ClientStream
}

type portServiceListPortClient struct {
	grpc.ClientStream
}

func (x *portServiceListPortClient) Recv() (*ListPortResponse, error) {
	m := new(ListPortResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PortServiceServer is the server API for PortService service.
// All implementations must embed UnimplementedPortServiceServer
// for forward compatibility
type PortServiceServer interface {
	CreatePort(context.Context, *CreatePortRequest) (*CreatePortResponse, error)
	RetreivePort(context.Context, *RetrievePortRequest) (*RetrievePortResponse, error)
	UpdatePort(context.Context, *UpdatePortRequest) (*UpdatePortResponse, error)
	DeletePort(context.Context, *DeletePortResquest) (*DeletePortResponse, error)
	ListPort(*ListPortRequest, PortService_ListPortServer) error
	mustEmbedUnimplementedPortServiceServer()
}

// UnimplementedPortServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortServiceServer struct {
}

func (UnimplementedPortServiceServer) CreatePort(context.Context, *CreatePortRequest) (*CreatePortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePort not implemented")
}
func (UnimplementedPortServiceServer) RetreivePort(context.Context, *RetrievePortRequest) (*RetrievePortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetreivePort not implemented")
}
func (UnimplementedPortServiceServer) UpdatePort(context.Context, *UpdatePortRequest) (*UpdatePortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePort not implemented")
}
func (UnimplementedPortServiceServer) DeletePort(context.Context, *DeletePortResquest) (*DeletePortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePort not implemented")
}
func (UnimplementedPortServiceServer) ListPort(*ListPortRequest, PortService_ListPortServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPort not implemented")
}
func (UnimplementedPortServiceServer) mustEmbedUnimplementedPortServiceServer() {}

// UnsafePortServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortServiceServer will
// result in compilation errors.
type UnsafePortServiceServer interface {
	mustEmbedUnimplementedPortServiceServer()
}

func RegisterPortServiceServer(s grpc.ServiceRegistrar, srv PortServiceServer) {
	s.RegisterService(&PortService_ServiceDesc, srv)
}

func _PortService_CreatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).CreatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PortService/CreatePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).CreatePort(ctx, req.(*CreatePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_RetreivePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrievePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).RetreivePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PortService/RetreivePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).RetreivePort(ctx, req.(*RetrievePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_UpdatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).UpdatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PortService/UpdatePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).UpdatePort(ctx, req.(*UpdatePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_DeletePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePortResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).DeletePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.PortService/DeletePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).DeletePort(ctx, req.(*DeletePortResquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_ListPort_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPortRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortServiceServer).ListPort(m, &portServiceListPortServer{stream})
}

type PortService_ListPortServer interface {
	Send(*ListPortResponse) error
	grpc.ServerStream
}

type portServiceListPortServer struct {
	grpc.ServerStream
}

func (x *portServiceListPortServer) Send(m *ListPortResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PortService_ServiceDesc is the grpc.ServiceDesc for PortService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.PortService",
	HandlerType: (*PortServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePort",
			Handler:    _PortService_CreatePort_Handler,
		},
		{
			MethodName: "RetreivePort",
			Handler:    _PortService_RetreivePort_Handler,
		},
		{
			MethodName: "UpdatePort",
			Handler:    _PortService_UpdatePort_Handler,
		},
		{
			MethodName: "DeletePort",
			Handler:    _PortService_DeletePort_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPort",
			Handler:       _PortService_ListPort_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "port.proto",
}
